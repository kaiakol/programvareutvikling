import express, { request, response } from "express";
import routeService from "./route-service";
import userService from "./user-service";

/**
 * Express router containing task methods.
 */
const router = express.Router();

router.get("/routes", (_request, response) => {
  routeService
    .getAll()
    .then((rows) => response.send(rows))
    .catch((error) => response.status(500).send(error));
});

// router.post("/routes", (request, response) => {
//   const route = request.body;
//   /**
//    * route_id and time_published should be autogenerated
//    */
//   if (
//     route &&
//     route.duration &&
//     typeof route.duration == "string" &&
//     route.duration.length != 0
//   )
//     routeService
//       .add(route.duration, route.estimated_price, route.time_published)
//       .then((route_id) => response.send({ route_id: route_id }))
//       .catch((error) => response.status(500).send(error));
//   else
//     response
//       .status(400)
//       .send(
//         "Missing task one or more of the following attributes: route_id, duration, time_published"
//       );
// });

router.get("/routes/:route_id", (request, response) => {
  const route_id = Number(request.params.route_id);
  routeService
    .getRoute(route_id)
    .then((route) =>
      route
        ? response.send(route)
        : response.status(404).send("Route not found")
    )
    .catch((error) => response.status(500).send(error));
});

router.delete("/routes/:route_id", (request, response) => {
  const route_id = Number(request.params.route_id);
  if (route_id) {
    routeService
      .remove(route_id)
      .then((_result) => response.send())
      .catch((error) => response.status(500).send(error));
  } else {
    response.status(400).send("Route does not exist.");
  }
});

//Se på denne
// router.put("/routes/:route_id", (request, response) => {
//   const route_id = Number(request.params.route_id);
//   const data = request.body;
//   if (route_id && data.duration > 0) {
//     routeService
//       .update({
//         route_id: data.route_id,
//         duration: data.duration,
//         estimated_price: data.estimated_price,
//         time_published: data.time_published,
//       })
//       .then((rows) => response.send(rows))
//       .catch((error) => response.status(500).send(error));
//   } else {
//     response
//       .status(400)
//       .send(
//         "Missing task one or more of the following attributes: route_id, duration, time_published"
//       );
//   }
// });

//Hører til transkasjonen som vi testet og kommenterte ut i route-router:
// router.post("/routes", (request, response) => {
//   const data = request.body;

//   routeService
//     .createRoute(
//       data.destination,
//       data.continent,
//       data.duration,
//       data.estimated_price
//       // data.order_number
//     )
//     .then((route_id) => response.status(200).send({ route_id: route_id }))
//     .catch((error) => response.status(500).send(error));
// });

//Creates new route

router.post("/routes/add", (request, response) => {
  const data = request.body; //Validering av parameter om nødvendig
  routeService
    .createRoute(data.duration, data.estimated_price)
    .then((route_id) => response.send({ route_id: route_id }))
    .catch((error) => response.status(500).send(error));
});

//Creates new travel points
router.post("/travel_points/add", (request, response) => {
  const data = request.body; //Validering av parameter om nødvendig
  routeService
    .createTravelPoint(data.travel_point_id, data.destination, data.continent)
    .then((travel_point_id) =>
      response.send({ travel_point_id: travel_point_id })
    )
    .catch((error) => response.status(500).send(error));
});

//Creates new route travel points
router.post("/route_travel_points/add", (request, response) => {
  const data = request.body; //Validering av parameter om nødvendig
  routeService
    .createRouteTravelPoint(
      data.route_id,
      data.travel_point_id,
      data.order_number
    )
    .then((route_travel_point_id) =>
      response.send({ route_travel_point_id: route_travel_point_id })
    )
    .catch((error) => response.status(500).send(error));
});

//Register a new user
router.post("/profile/register", (request, response) => {
  const data = request.body;
  //Check required fields
  if (
    !data.profile_name ||
    !data.first_name ||
    !data.last_name ||
    !data.email ||
    !data.profile_password
  ) {
    response.status(400).send("Please fill in all the fields");
    return;
  }
  userService
    .createUser(
      data.profile_name,
      data.profile_password,
      data.first_name,
      data.last_name,
      data.email,
      data.special_user_type
    )
    .then((user) => response.status(200).send(user))
    .catch((error) => response.status(500).send(error));
  return;
});

export default router;
